/*
T:casos de testes (1 ≤ T ≤ 100)
N:numero de times (2 ≤ N ≤ 100)
x e z:identificam o times
y e w:pontos por time(y:x e w:z)
*/
#include <stdio.h>
#include <stdlib.h>

#define vitoria 2
#define derrota 1
#define empate  0

struct entrada {
    int x, y, z, w;
};

int *solucao(struct entrada *entradas, int m, int n_teams);
void quicksort(int *A, int len);//https://rosettacode.org/mw/index.php?title=Sorting_algorithms/Quicksort&redirect=no#C no dia 04/05/19
void resolve_por_cesta(int *A, int len);

int main()
{
    int *ret;
    int t, i, j;
    int T, N;

    scanf("%d", &T);

    for (t = 0; t < T; t++) {

        scanf("%d", &N);

        int m = (int) (N * (N - 1)/2);
        struct entrada *entradas = (struct entrada *) malloc(m * sizeof(struct entrada));
        for (i = 0; i < m; i++) {
            scanf("%d %d %d %d", &entradas[i].x, &entradas[i].y, &entradas[i].z, &entradas[i].w);
        }

        ret = solucao(entradas, m, N);

        printf("Caso de teste %d\n", t+1);
        for (i = 0; i < N; i++)
            if (i + 1 < N)
                printf("%d ", ret[N-i]);
            else
                printf("%d\n", ret[N-i]);
    }

    return 0;
}

int *solucao(struct entrada *entradas, int m, int n_teams)
{
    int *ret = (int *) malloc(n_teams * sizeof(int));
    int pontos[n_teams],cestas[n_teams],i;

    for(i=0;i<n_teams;i++){//tirando lixo do vetor
        pontos[i]=0;
        cestas[i]=0;
    }

    for(i=0;i<m;i++){
        cestas[(entradas[i].x)-1]+=entradas[i].w;
        cestas[(entradas[i].z)-1]+=entradas[i].y;

        if((entradas[i].y)>(entradas[i].w)){
            pontos[(entradas[i].x)-1]+=vitoria;
            pontos[(entradas[i].z)-1]+=derrota;
        }
        if((entradas[i].y)==(entradas[i].w)){
            pontos[(entradas[i].x)-1]+=derrota;
            pontos[(entradas[i].z)-1]+=vitoria;
        }
        if((entradas[i].y)<(entradas[i].w)){
            pontos[(entradas[i].x)-1]+=empate;
            pontos[(entradas[i].z)-1]+=empate;
        }
    }

    for(i=0;i<n_teams;i++){//i=numero do time -1; 0 ≤ i ≤ 99 ... logo inao altera a ordenação dos pontos e ao mesmo tempo ajuda a guarda qual time é
        pontos[i]=100*pontos[i]+i;
    }

    quicksort(pontos,n_teams);

    for(i=01;i<n_teams;i++){
        if((pontos[i-1]/100)==(pontos[i]/100)){//caso em que dois times tem a mesma pontuação
           resolve_por_cesta(pontos,n_teams);
           break;
        }
    }

    for(i=0;i<n_teams;i++){
        ret[i]=(pontos[i]%100)+1;//o resto da divição é o numero do time -1
    }

    return ret;
}

void quicksort(int *A, int len) {
  if (len < 2) return;

  int pivot = A[len / 2];

  int i, j;
  for (i = 0, j = len - 1; ; i++, j--) {
    while (A[i] < pivot) i++;
    while (A[j] > pivot) j--;

    if (i >= j) break;

    int temp = A[i];
    A[i]     = A[j];
    A[j]     = temp;
  }

  quicksort(A, i);
  quicksort(A + i, len - i);
}

void resolve_por_cesta(int *a,int len){

}
