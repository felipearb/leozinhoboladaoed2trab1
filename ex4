#include <stdio.h>
#include <stdlib.h>

struct entrada {
    int *itens;
    int *consultas;
};

int* solucao(struct entrada entrada, int n, int c);
void quicksort(int *A, int tam);
int busca(int *A,int tam,int C);

int main()
{
    int *ret;
    int t, i;
    int T, N, C;

    scanf("%d", &T);

    for (t = 1; t <= T; t++) {

        scanf("%d %d", &N, &C);

        struct entrada entrada;
        entrada.itens = (int *) malloc(N * sizeof(int));
        entrada.consultas = (int *) malloc(C * sizeof(int));

        scanf("%d", &entrada.itens[0]);
        for (i = 1; i < N; i++) {
            scanf(" %d", &entrada.itens[i]);
        }

        scanf("%d", &entrada.consultas[0]);
        for (i = 1; i < C; i++) {
            scanf(" %d", &entrada.consultas[i]);
        }

        ret = solucao(entrada, N, C);

        for (i = 0; i < C; i++) {
            if (ret[i] >= 0)
                printf("Caso %d, item %d na posicao %d.\n", t+1, entrada.consultas[i], ret[i]);
            else
                printf("Caso %d, item %d nao existe.\n", t+1, entrada.consultas[i]);

        }
    }

    return 0;
}

int* solucao(struct entrada entrada, int n, int c)
{
    int i;
    int *ret = (int *) malloc(c * sizeof(int));

    quicksort(entrada.itens,n);

    for(i=0;i<c;i++){
        ret[i]=busca(entrada.itens,n,entrada.consultas[i]);
    }

    return ret;
}

void quicksort(int *A, int tam) {
    if (tam < 2) return;

    int pivot = A[tam / 2];

    int i, j;
    for (i = 0, j = tam - 1; ; i++, j--) {
        while (A[i] < pivot) i++;
        while (A[j] > pivot) j--;

        if (i >= j) break;

        int temp = A[i];
        A[i]     = A[j];
        A[j]     = temp;
  }

  quicksort(A, i);
  quicksort(A + i, tam - i);
}

int busca(int *A,int tam,int C){
    int i=0;
    int j=tam-1;

    while (i <= j) {
        int k = (i + j) / 2;
        if (A[k] == C) {
            return k;
        }
        else if (A[k] < C) {
            i = k + 1;
        }
        else {
            j = k - 1;
        }
    }
    return -1;
}
